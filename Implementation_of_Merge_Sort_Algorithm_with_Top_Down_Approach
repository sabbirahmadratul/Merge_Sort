//Implementation of Merge_Sort
//with Top-Down Approach in C++
//The code will also work in C


//Necessary header files for C++
#include <iostream>
#include <cstdio>

//Necessary header files for C
//#include <stdio.h>

//Remove/make comment this line while using C
using namespace std;

//Prototype of Merge() function
//Or we can write Merge() function here
void Merge(int A[], int lo, int mid, int hi);

//Merge_Sort() function
//It is used to divide the problem into two sub-problems
//and called recursively until each problem can be solved
void Merge_Sort(int A[], int lo, int hi)//A[], 0, 5
{
    //Check if the starting and ending index of the array
    //are equal
    if(lo == hi)
        return;

    //If starting and ending index are non-equal
    //divide the array into two sub-arrays
    int mid = lo + (hi - lo)/2;

    //We may use it also: int mid = (hi + lo)/2;

    //Call Merge_Sort()function for
    //each sub-array
    Merge_Sort(A, lo, mid);
    Merge_Sort(A, mid + 1, hi);

    //Call Merge() function to merge two solved
    //or sorted sub-arrays into one
    Merge(A, lo, mid, hi);
}


//Merge() function to merge two solved
//or sorted sub-arrays
void Merge(int A[], int lo, int mid, int hi)
{
    int i;

    //size_l and size_r are the size of two
    //sub-arrays respectively
    int size_l = mid - lo + 1;
    int size_r = hi - mid;

    //index_a, index_l and index_r are the index number of
    //A[], L[] and R[] arrays respectively
    int index_a, index_l = 0, index_r = 0;

    //L[] and R[] are two arrays where we
    //store the first and second sub-array temporarily
    //we just got from the Merge_Sort() function
    int L[size_l], R[size_r];

    //We used a 'for' loop to store first sub-array
    //into L[] array
    for(i = 0; i < size_l; i++)
    {
        L[i] = A[lo + i];
    }

    //We used a 'for' loop to store second sub-array
    //into R[] array
    for(i = 0; i < size_r; i++)
    {
        R[i] = A[mid + 1 + i];
    }

    //We used a 'for' loop which will execute for the condition
    //that index of L[] array is smaller than the size of L[] and
    //index of R[] array is smaller than the size of R[]
    //simultaneously
    for(index_a = lo; index_l < size_l && index_r < size_r; index_a++)
    {
        if(L[index_l] < R[index_r])
        {
            A[index_a] = L[index_l];
            index_l++;

            //We may use it also: A[index_a] = L[index_l++];
        }

        else
        {
            A[index_a] = R[index_r];
            index_r++;

            //We may use it also: A[index_a] = R[index_r++];
        }
    }

    //We used a 'while' loop to check
    //if there is any element in L[]
    //and copy them to A[] if any
    while(index_l < size_l)
    {
        A[index_a] = L[index_l];
        index_l++;
        index_a++;

        //We may use it also: A[index_a++] = L[index_l++];
    }

    //We used a 'while' loop to check
    //if there is any element in R[]
    //and copy them to A[] if any
    while(index_r < size_r)
    {
        A[index_a] = R[index_r];
        index_r++;
        index_a++;

        //We may use it also: A[index_a++] = R[index_r++];
    }

}

/*

//Print_Array() function to print
//all elements of an array
//Used with 'Test code 02'
void Print_Array(int A[], int arr_size)
{
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
}

*/


//Driver function to check the program
//is working correctly
int main()
{

    //Test code 01: With user input

    //We defined an array with 6 elements
    int A[6] = {2, 5, 1, 8, 4, 7};

    //Formula to get the size of an array
    int arr_size = sizeof(A)/sizeof(A[0]);

    //Print the elements of the array A[]
    //before calling Merge_Sort() function
    printf("Before Merge Sort: ");
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }

    //Print two new line
    printf("\n\n");

    Merge_Sort(A, 0, arr_size - 1);

    //Print the elements of the array A[]
    //after calling Merge_Sort() function
    printf("After Merge Sort: ");
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }

    //Print a new line
    printf("\n");


    /*

    //Test Code 02: With no user input
    //If you use this code, please
    //uncomment Print_Array() function also

    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int A[n];
    printf("Enter the elements: ");
    for(int i = 0; i < n; i++)
    {
        scanf("%d", &A[i]);
    }

    printf("Before Merge Sort: ");
    Print_Array(A, n);

    Merge_Sort(A, 0, n - 1);

    printf("After Merge Sort: ");
    Print_Array(A, n);

    */

    return 0;
}




/*-----------------------
Full Code without Comment
-----------------------*/

#include <iostream>
#include <cstdio>
using namespace std;

//#include <stdio.h>

void Merge(int A[], int lo, int mid, int hi);

void Merge_Sort(int A[], int lo, int hi)//A[], 0, 5
{
    if(lo == hi)
        return;

    int mid = lo + (hi - lo)/2;

    Merge_Sort(A, lo, mid);
    Merge_Sort(A, mid + 1, hi);

    Merge(A, lo, mid, hi);
}


void Merge(int A[], int lo, int mid, int hi)
{
    int i;
    
    int size_l = mid - lo + 1;
    int size_r = hi - mid;
    int L[size_l], R[size_r];

    int index_a, index_l = 0, index_r = 0;

    for(i = 0; i < size_l; i++)
    {
        L[i] = A[lo + i];
    }

    for(i = 0; i < size_r; i++)
    {
        R[i] = A[mid + 1 + i];
    }

    for(index_a = lo; index_l < size_l && index_r < size_r; index_a++)
    {
        if(L[index_l] < R[index_r])
        {
            A[index_a] = L[index_l];
            index_l++;
        }

        else
        {
            A[index_a] = R[index_r];
            index_r++;
        }
    }

    while(index_l < size_l)
    {
        A[index_a] = L[index_l];
        index_l++;
        index_a++;
    }
    
    while(index_r < size_r)
    {
        A[index_a] = R[index_r];
        index_r++;
        index_a++;
    }

}

/*
void Print_Array(int A[], int arr_size)
{
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
}
*/


int main()
{
    int A[6] = {2, 5, 1, 8, 4, 7};

    int arr_size = sizeof(A)/sizeof(A[0]);

    printf("Before Merge Sort: ");
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }
    
    printf("\n\n");

    Merge_Sort(A, 0, arr_size - 1);

    printf("After Merge Sort: ");
    for(int i = 0; i < arr_size; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
    
    /*
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int A[n];
    printf("Enter the elements: ");
    for(int i = 0; i < n; i++)
    {
        scanf("%d", &A[i]);
    }

    printf("Before Merge Sort: ");
    Print_Array(A, n);

    Merge_Sort(A, 0, n - 1);

    printf("After Merge Sort: ");
    Print_Array(A, n);
    */

    return 0;
}
