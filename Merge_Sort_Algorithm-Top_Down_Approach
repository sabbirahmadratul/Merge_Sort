Algorithm Merge_Sort(A[], lo, hi)
{
    if(hi == lo)
        return;
    
    mid := lo + (hi - lo)/2;
    
    Merge_Sort(A, lo, mid);
    Merge_Sort(A, mid + 1, hi);
    
    Merge(A, lo, mid, hi);
}


Algorithm Merge(A[], lo, mid, hi)
{
    size_l := mid - lo + 1;
    size_r := hi - mid;

    index_a, index_l := 0, index_r := 0;

    L[size_l], R[size_r];

    for(i := 0 to size_l - 1) do
    {
        L[i] := A[lo + i];
        i := i + 1;
    }

    for(i := 0 to size_r - 1) do
    {
        R[i] := A[mid + 1 + i];
        i := i + 1;
    }
    
    index_a := lo;
    for(index_l < size_l) and (index_r < size_r) do
    {
        if(L[index_l] < R[index_r]) then
        {
            A[index_a] := L[index_l];
            index_l++;
        }

        else
        {
            A[index_a] := R[index_r];
            index_r++;
        }
        
        index_a++;
    }
    
    while(index_l < size_l) do
    {
        A[index_a] := L[index_l];
        index_l++;
        index_a++;
    }

    while(index_r < size_r) do
    {
        A[index_a] := R[index_r];
        index_r++;
        index_a++;
    }

}
