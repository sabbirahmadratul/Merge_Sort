Algorithm Merge_Sort(A, lo, hi)
{
    if hi = lo then return;
    
    mid := lo + (hi - lo)/2;
    
    Merge_Sort(A, lo, mid);
    Merge_Sort(A, mid + 1, hi);
    
    Merge(A, lo, mid, hi);
}


Algorithm Merge(A, lo, mid, hi)
{
    size_l := mid - lo + 1;
    size_r := hi - mid;

    index_a := lo; index_l := 0; index_r := 0;

    for i := 0 to size_l - 1 do
        L[i] := A[lo + i];

    for i := 0 to size_r - 1 do
        R[i] := A[mid + 1 + i];
    
    while (index_l < size_l) and (index_r < size_r) do
    {
        if (L[index_l] < R[index_r]) then
            A[index_a++] := L[index_l++];
        else
            A[index_a++] := R[index_r++];
    }
    
    while (index_l < size_l) do
        A[index_a++] := L[index_l++];

    while (index_r < size_r) do
        A[index_a++] := R[index_r++];

}
